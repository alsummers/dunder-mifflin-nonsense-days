{"version":3,"sources":["dunder_mifflin.png","components/Header.js","components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","dateStyle","float","margin","fontSize","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","toLocaleString","clearInterval","continueTime","_this2","setInterval","dateTick","newTime","setState","react_default","a","createElement","className","src","logo","height","alt","style","Component","Counter","start","counter","dayCounter","bind","assertThisInitialized","fetchArticles","fetch","then","res","json","data","response","articles","publishedAt","toLocaleDateString","startDay","difference","daysSince","Math","floor","App","toString","components_Header","src_components_Counter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c178c15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dunder_mifflin.3fe9b4bf.png\";","import React, { Component } from 'react';\r\n\r\nconst dateStyle = {\r\n    float: 'right',\r\n    margin: '20px',\r\n    fontSize: '24px'\r\n}\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date().toLocaleString()\r\n        }\r\n    }\r\n    componentWillMount() {\r\n        clearInterval(this.continueTime)\r\n    }\r\n    componentDidMount() {\r\n        this.continueTime = setInterval(() =>\r\n            this.dateTick(), 1000\r\n        )\r\n    }\r\n    dateTick() {\r\n        let newTime = new Date().toLocaleString()\r\n        this.setState({\r\n            date: newTime\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <ul>\r\n                    <li><img src={this.props.logo} height='100px' alt=\"logo\" /></li>\r\n                    <li style={dateStyle}>{this.state.date}</li>\r\n                </ul>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nexport default Header","import React, { Component } from 'react'\r\nimport './Counter.css'\r\n\r\nclass Counter extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            start: '',\r\n            counter: 0\r\n        }\r\n        this.dayCounter = this.dayCounter.bind(this)\r\n        this.fetchArticles = this.fetchArticles.bind(this)\r\n    }\r\n    componentDidMount() {\r\n        this.fetchArticles()\r\n    }\r\n    fetchArticles() {\r\n        fetch('https://newsapi.org/v2/everything?q=dunder%20mifflin&apiKey=6dcf55985cc74c36bd462ee31cd2396f')\r\n            .then((res) => {\r\n                return res.json();\r\n            }).then((data) => {\r\n                let response = data.articles[19].publishedAt\r\n                // let source = response.articles\r\n                response = new Date(response).toLocaleDateString()\r\n                this.setState({\r\n                    start: response\r\n                })\r\n                return this.state.start\r\n            }).then((start) => {\r\n                this.dayCounter(start)\r\n\r\n            })\r\n    }\r\n    dayCounter(startDay) {\r\n        let then = startDay\r\n        let date = new Date(then)\r\n        let now = new Date()\r\n        let difference = now - date\r\n        let millisecondsPerDay = 24 * 60 * 60 * 1000\r\n        let daysSince = Math.floor(difference / millisecondsPerDay)\r\n        this.setState({\r\n            counter: daysSince\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Counter\">\r\n                <div className=\"container\">\r\n                    <div className=\"blackboard\">\r\n                        <div className=\"writing\">\r\n                        <div className=\"line\">\r\n                            <div className=\"days\">\r\n                            {this.state.counter} \r\n                            </div>\r\n                            Days\r\n                            </div>\r\n                             Since Our Last Nonsense\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Counter","import React, { Component } from 'react';\nimport Header from './components/Header'\nimport Counter from './components/Counter'\nimport logo from './dunder_mifflin.png'\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      date: new Date().toString()\n    }\n  }\n  componentWillMount(){\n    clearInterval(this.continueTime)\n  }\n  componentDidMount(){\n    this.continueTime = setInterval(() =>\n    this.dateTick(), 1000\n    )\n  }\n  dateTick(){\n    let newTime = new Date().toString()\n    this.setState({\n      date: newTime\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <Header logo={logo}/>\n      <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}